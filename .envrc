#! /usr/bin/env bash

PROJECT_ROOT="$(pwd)"
LIB_NAME="fsynth"
LIB_ROOT="${PROJECT_ROOT}/${LIB_NAME}"
export LIB_NAME
export PROJECT_ROOT
export LIB_ROOT

# Export the project root for use in other scripts
export FSYNTH_ROOT="${PROJECT_ROOT}"

# Check for luarocks command first
LUAROCKS_BIN=$(command -v luarocks)

if [[ -n "${LUAROCKS_BIN}" ]]; then # Only proceed if luarocks command is found
    if [[ "${LUAROCKS_LOCAL}" == "true" ]]; then
        # LUAROCKS_LOCAL is true (e.g., CI): use system/user default local tree (~/.luarocks)
        # This is typically used when 'luarocks install --local' was run without a specific tree.
        echo "LUAROCKS_LOCAL is true. Setting up LuaRocks paths for user tree..." >&2
        eval "$("${LUAROCKS_BIN}" path)"
    else
        # LUAROCKS_LOCAL is not 'true' (or unset, e.g., local development):
        # Try to use a project-local tree at ./.luarocks if it exists.
        if [[ -d "${PROJECT_ROOT}/.luarocks" ]]; then
            echo "LUAROCKS_LOCAL is not true. Using project-local LuaRocks tree at ./.luarocks..." >&2
            LUAROCKS_PATH_RESULT=$("${LUAROCKS_BIN}" --tree "${PROJECT_ROOT}/.luarocks" path) && eval "${LUAROCKS_PATH_RESULT}"
        else
            echo "LUAROCKS_LOCAL is not true, and no project-local .luarocks tree found. LuaRocks paths not modified by .envrc for a specific tree." >&2
        fi
    fi
else
    SHOULD_HAVE_LUAROCKS=false
    if [[ "${LUAROCKS_LOCAL}" == "true" ]]; then
        SHOULD_HAVE_LUAROCKS=true
    elif [[ -d "${PROJECT_ROOT}/.luarocks" ]]; then # Check project dir even if LUAROCKS_LOCAL is not true
        SHOULD_HAVE_LUAROCKS=true
    fi

    if [[ "${SHOULD_HAVE_LUAROCKS}" == "true" ]]; then
        echo "LuaRocks command not found, but it appears to be needed. LuaRocks paths not configured by .envrc." >&2
    fi
fi
