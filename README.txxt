FSYNTH: SYNTHETIC FILESYSTEM FOR ISOLATED OPERATIONS
===================================================

Purpose and Rationale
--------------------

Fsynth provides a synthetic filesystem abstraction to isolate and queue 
filesystem operations for batch execution. The primary goal is to separate 
planning from execution, allowing most of the codebase to remain functional 
and side-effect free. This approach:

- Makes code easier to test by isolating side effects
- Enables dry-run capabilities without code duplication
- Improves reliability by enabling pre-execution validation
- Allows for proper error handling and optional partial rollback

Fsynth isn't intended for data-critical or concurrent environments. It's 
designed for simple, reliable file operation batching with appropriate 
safeguards.


Core Design Principles
---------------------

1. PURE PLANNING, ISOLATED EXECUTION
   Build an operation queue without making any actual filesystem changes,
   then execute the queue in a controlled, isolated part of the codebase.

2. CONTENT VERIFICATION
   Each file operation should checksum source and target files where
   appropriate. This enables:
   - Verification that the source file hasn't changed since planning
   - Detection of target file changes before overwriting
   - Optional backing down if content has changed

3. SAFE DIRECTORY HANDLING
   When processing directories:
   - Use an accumulator to track processed items
   - Implement a configurable maximum to prevent processing huge directories
   - Provide a clear mechanism to skip/include dotfiles

4. ROLLBACK CAPABILITY
   While not promising full transaction semantics, fsynth should attempt
   reasonable rollback of failed operation batches.

5. IMMUTABILITY AND FUNCTIONAL APPROACH
   Once an operation is created, its parameters should be immutable.
   This helps with debugging and ensures operations don't unexpectedly
   change behavior between creation and execution.


API Design
---------

The API follows the Command pattern with a queue-based approach.

1. OPERATION INTERFACE [1]
   Each operation encapsulates a specific filesystem action with a standard
   interface including:
   - execute(): performs the operation
   - validate(): pre-checks operation validity
   - checksum(): generates or verifies checksums
   - undo(): reverses the operation (when possible)

2. QUEUE MANAGEMENT [2]
   The system uses an efficient queue implementation with O(1) enqueue/dequeue
   operations.

3. BASIC OPERATIONS
   Core operations include:
   - CopyFile: Copy a file with checksum verification
   - SymlinkFile: Create a symlink
   - CreateDirectory: Create a directory (and parent dirs if needed)
   - DeleteFile: Remove a file with optional backup
   - DeleteDirectory: Remove a directory with safety limits
   - MoveFile: Move a file with checksum verification
   - ChmodFile: Change file permissions

4. PROCESSOR INTERFACE [3]
   The processor executes the operation queue with proper error handling
   and optional rollback.


Implementation Details
--------------------

1. OPERATION REPRESENTATION
   Each operation is a Lua table with methods (using metatables) that include:
   - Common fields: source, target, options, checksum_data
   - Operation-specific fields as needed
   - Standard methods matching the operation interface

2. CHECKSUMMING
   - Use SHA-256 for robust checksumming
   - Store checksums for both source and target files
   - Options to compare checksums before operations
   - Options to bail out if checksums don't match expectations

3. DIRECTORY HANDLING
   - Implement iteration with item counting
   - Configurable max_items parameter (default reasonably low, ~1000)
   - Store current count in an accumulator object
   - Clear warning/error when limit is reached

4. ERROR HANDLING
   |    - Detailed error messages with context
   |    - Error classification (fatal vs. non-fatal)
   |    - Option to continue on non-fatal errors
   |    - Logging of all operations and errors
   |
   | 5. LOGGING
   |    - Uses the `log` library for all logging operations
   |    - Log file is automatically truncated at startup
   |    - Default log level is "info" for console output
   |    - All levels (trace through fatal) are logged to file
   |    - Log file is stored at "/var/tmp/lua-fsynth.log"
   |    - Log entries include timestamp, source file, and line number
   |    - Always use the log module instead of print statements
   |
   | 6. EXECUTION MODELS
   - Standard: Execute operations in order, stopping on first error
   - Validate-first: Validate all operations before executing any
   - Best-effort: Try all operations, collecting errors
   - Transactional: Attempt rollback of completed operations on failure


Integration with Existing Systems
-------------------------------

Fsynth is designed to work with Penlight for path handling and filesystem
operations. Key integration points:

1. Leveraging Penlight's path functions for normalization, joining, etc.
2. Using pl.dir for directory operations when appropriate
3. Wrapping pl.file functions for file operations
4. Using Penlight's utility functions where helpful

The library will be tested with Busted, using mocks to isolate filesystem
operations for unit testing.


Testing Approach
--------------

1. UNIT TESTING
   - Test each operation type in isolation
   - Test validation, execution, and rollback separately
   - Test queue management independently

2. INTEGRATION TESTING
   - Test full execution flows with controlled test directories
   - Verify proper handling of edge cases (permissions, etc.)
   - Test with various execution models


